ROS uses quaternions to track and apply rotations. A quaternion has 4 
components (x,y,z,w).

from geometry_msgs.msg import Quaternion

# Create a list of floats, which is compatible with tf
# quaternion methods
quat_tf = [0, 1, 0, 0]

quat_msg = Quaternion(quat_tf[0], quat_tf[1], quat_tf[2], quat_tf[3])

It's easy for humans to think of rotations about axes but hard to think in 
terms of quaternions. A suggestion is to calculate target rotations in terms 
of (roll about an X-axis) / (subsequent pitch about the Y-axis) / 
(subsequent yaw about the Z-axis), then convert to a quaternion

# tf.transformations alternative is not yet available in tf2
from tf.transformations import quaternion_from_euler
  
if __name__ == '__main__':

  # RPY to convert: 90deg, 0, -90deg
  q = quaternion_from_euler(1.5707, 0, -1.5707)

  print "The quaternion representation is %s %s %s %s." % (q[0], q[1], q[2], q[3])

To apply the rotation of one quaternion to a pose, simply multiply the 
previous quaternion of the pose by the quaternion representing the desired 
rotation. The order of this multiplication matters.

from tf.transformations import *

q_orig = quaternion_from_euler(0, 0, 0)
q_rot = quaternion_from_euler(pi, 0, 0)
q_new = quaternion_multiply(q_rot, q_orig)
print q_new

To invert use 
q[3]=-q[3]

